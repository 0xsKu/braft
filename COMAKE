#edit-mode: -*- python -*-
#coding:gbk

WORKROOT('../../')

import os
is_svn = False
if os.system("svn info 2>/dev/null") == 0:
    print "is svn"
    is_svn = True
else:
    print "is git"
    is_svn = False

get_rev_cmd = ""
if is_svn:
    get_rev_cmd ='$(shell LC_ALL=en_US svn info | grep "Last Changed Rev:" | awk \'{print $$4}\')'
else:
    get_rev_cmd = '$(shell git rev-parse --short HEAD)'

CPPFLAGS('-D_GNU_SOURCE -D__const__= -DNDEBUG')
CPPFLAGS(' -DRAFT_REVISION=\\\"%s\\\"' % get_rev_cmd);
CPPFLAGS('-O2 -g -pipe -Werror -Wall -W -fPIC -Wno-unused-parameter -Wno-strict-aliasing -Wno-invalid-offsetof -D__STDC_CONSTANT_MACROS')
CPPFLAGS('-fno-omit-frame-pointer')

import os
gcc_version_str = os.popen("gcc -dumpversion").readline().strip().split('.')
gcc_version_size = len(gcc_version_str);
gcc_version = 0
# doing this way because debian/ubuntu may return "4.8"
if gcc_version_size >= 1:
    gcc_version += int(gcc_version_str[0]) * 10000
if gcc_version_size >= 2:
    gcc_version += int(gcc_version_str[1]) * 100
if gcc_version_size >= 3:
    gcc_version += int(gcc_version_str[2])

if gcc_version >= 40000:
    CXXFLAGS('-Wno-unused-local-typedefs -Wno-missing-field-initializers')
if gcc_version >= 40400:
    CXXFLAGS('-Wno-unused-result')

INCPATHS('./src')

CONFIGS('public/baidu-rpc@ci-base')

def GenProtoCpp(filelist):
    import commands
    for path in filelist:
        part = path.partition('/');
        cpppath = "src/" + os.path.splitext(part[2])[0] + '.pb.cc'
        cmd = ENV.WorkRoot() + '/third-64/protobuf/bin/protoc' +\
              ' --proto_path=./' + part[0] + \
              ' --proto_path=' + ENV.WorkRoot() + '/third-64/protobuf/include/' + \
              ' --cpp_out=./src ' + path
        commands.getoutput(cmd);
        TARGET(cpppath, Prefixes(path), ShellCommands(cmd), CleanFiles(''))

GenProtoCpp(GLOB('protocol/raft/*.proto').split(' '))

StaticLibrary('raft',Sources(GLOB('src/raft/*.cpp src/raft/*.cc'), 
                             Prefixes(GLOB('src/raft/*.h'))))

LDFLAGS('-lpthread -lrt -lssl -lcrypto -ldl -lz')
Application("raft_cli", Sources("tools/raft_cli.cpp"), Libraries("libraft.a"))

TARGET('output/include', PhonyMode('true'), Prefixes('libraft.a'),
       ShellCommands("cd src; for dir in `find . -type f -name \"*.h\" -exec dirname {} \\; | sort | uniq`; do mkdir -p ../output/include/$$dir && cp $$dir/*.h ../output/include/$$dir/; done; cd .."),
       CleanFiles('output/include'))

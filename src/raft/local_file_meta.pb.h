// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft/local_file_meta.proto

#ifndef PROTOBUF_raft_2flocal_5ffile_5fmeta_2eproto__INCLUDED
#define PROTOBUF_raft_2flocal_5ffile_5fmeta_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_raft_2flocal_5ffile_5fmeta_2eproto();
void protobuf_AssignDesc_raft_2flocal_5ffile_5fmeta_2eproto();
void protobuf_ShutdownFile_raft_2flocal_5ffile_5fmeta_2eproto();

class LocalFileMeta;

// ===================================================================

class LocalFileMeta : public ::google::protobuf::Message {
 public:
  LocalFileMeta();
  virtual ~LocalFileMeta();
  
  LocalFileMeta(const LocalFileMeta& from);
  
  inline LocalFileMeta& operator=(const LocalFileMeta& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LocalFileMeta& default_instance();
  
  void Swap(LocalFileMeta* other);
  
  // implements Message ----------------------------------------------
  
  LocalFileMeta* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LocalFileMeta& from);
  void MergeFrom(const LocalFileMeta& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string tag = 1;
  inline bool has_tag() const;
  inline void clear_tag();
  static const int kTagFieldNumber = 1;
  inline const ::std::string& tag() const;
  inline void set_tag(const ::std::string& value);
  inline void set_tag(const char* value);
  inline void set_tag(const char* value, size_t size);
  inline ::std::string* mutable_tag();
  inline ::std::string* release_tag();
  
  // optional string reference = 2;
  inline bool has_reference() const;
  inline void clear_reference();
  static const int kReferenceFieldNumber = 2;
  inline const ::std::string& reference() const;
  inline void set_reference(const ::std::string& value);
  inline void set_reference(const char* value);
  inline void set_reference(const char* value, size_t size);
  inline ::std::string* mutable_reference();
  inline ::std::string* release_reference();
  
  // @@protoc_insertion_point(class_scope:LocalFileMeta)
 private:
  inline void set_has_tag();
  inline void clear_has_tag();
  inline void set_has_reference();
  inline void clear_has_reference();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* tag_;
  ::std::string* reference_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_raft_2flocal_5ffile_5fmeta_2eproto();
  friend void protobuf_AssignDesc_raft_2flocal_5ffile_5fmeta_2eproto();
  friend void protobuf_ShutdownFile_raft_2flocal_5ffile_5fmeta_2eproto();
  
  void InitAsDefaultInstance();
  static LocalFileMeta* default_instance_;
};
// ===================================================================


// ===================================================================

// LocalFileMeta

// optional string tag = 1;
inline bool LocalFileMeta::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LocalFileMeta::set_has_tag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LocalFileMeta::clear_has_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LocalFileMeta::clear_tag() {
  if (tag_ != &::google::protobuf::internal::kEmptyString) {
    tag_->clear();
  }
  clear_has_tag();
}
inline const ::std::string& LocalFileMeta::tag() const {
  return *tag_;
}
inline void LocalFileMeta::set_tag(const ::std::string& value) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::kEmptyString) {
    tag_ = new ::std::string;
  }
  tag_->assign(value);
}
inline void LocalFileMeta::set_tag(const char* value) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::kEmptyString) {
    tag_ = new ::std::string;
  }
  tag_->assign(value);
}
inline void LocalFileMeta::set_tag(const char* value, size_t size) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::kEmptyString) {
    tag_ = new ::std::string;
  }
  tag_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LocalFileMeta::mutable_tag() {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::kEmptyString) {
    tag_ = new ::std::string;
  }
  return tag_;
}
inline ::std::string* LocalFileMeta::release_tag() {
  clear_has_tag();
  if (tag_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tag_;
    tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string reference = 2;
inline bool LocalFileMeta::has_reference() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LocalFileMeta::set_has_reference() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LocalFileMeta::clear_has_reference() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LocalFileMeta::clear_reference() {
  if (reference_ != &::google::protobuf::internal::kEmptyString) {
    reference_->clear();
  }
  clear_has_reference();
}
inline const ::std::string& LocalFileMeta::reference() const {
  return *reference_;
}
inline void LocalFileMeta::set_reference(const ::std::string& value) {
  set_has_reference();
  if (reference_ == &::google::protobuf::internal::kEmptyString) {
    reference_ = new ::std::string;
  }
  reference_->assign(value);
}
inline void LocalFileMeta::set_reference(const char* value) {
  set_has_reference();
  if (reference_ == &::google::protobuf::internal::kEmptyString) {
    reference_ = new ::std::string;
  }
  reference_->assign(value);
}
inline void LocalFileMeta::set_reference(const char* value, size_t size) {
  set_has_reference();
  if (reference_ == &::google::protobuf::internal::kEmptyString) {
    reference_ = new ::std::string;
  }
  reference_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LocalFileMeta::mutable_reference() {
  set_has_reference();
  if (reference_ == &::google::protobuf::internal::kEmptyString) {
    reference_ = new ::std::string;
  }
  return reference_;
}
inline ::std::string* LocalFileMeta::release_reference() {
  clear_has_reference();
  if (reference_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reference_;
    reference_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_raft_2flocal_5ffile_5fmeta_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft/file_service.proto

#ifndef PROTOBUF_raft_2ffile_5fservice_2eproto__INCLUDED
#define PROTOBUF_raft_2ffile_5fservice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/service.h>
// @@protoc_insertion_point(includes)

namespace raft {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_raft_2ffile_5fservice_2eproto();
void protobuf_AssignDesc_raft_2ffile_5fservice_2eproto();
void protobuf_ShutdownFile_raft_2ffile_5fservice_2eproto();

class GetFileRequest;
class GetFileResponse;
class PathInfo;
class ListPathRequest;
class ListPathResponse;

// ===================================================================

class GetFileRequest : public ::google::protobuf::Message {
 public:
  GetFileRequest();
  virtual ~GetFileRequest();
  
  GetFileRequest(const GetFileRequest& from);
  
  inline GetFileRequest& operator=(const GetFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFileRequest& default_instance();
  
  void Swap(GetFileRequest* other);
  
  // implements Message ----------------------------------------------
  
  GetFileRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetFileRequest& from);
  void MergeFrom(const GetFileRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 reader_id = 1;
  inline bool has_reader_id() const;
  inline void clear_reader_id();
  static const int kReaderIdFieldNumber = 1;
  inline ::google::protobuf::int64 reader_id() const;
  inline void set_reader_id(::google::protobuf::int64 value);
  
  // required string filename = 2;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 2;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  
  // required int64 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::int64 count() const;
  inline void set_count(::google::protobuf::int64 value);
  
  // required int64 offset = 4;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 4;
  inline ::google::protobuf::int64 offset() const;
  inline void set_offset(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:raft.GetFileRequest)
 private:
  inline void set_has_reader_id();
  inline void clear_has_reader_id();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_offset();
  inline void clear_has_offset();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 reader_id_;
  ::std::string* filename_;
  ::google::protobuf::int64 count_;
  ::google::protobuf::int64 offset_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_raft_2ffile_5fservice_2eproto();
  friend void protobuf_AssignDesc_raft_2ffile_5fservice_2eproto();
  friend void protobuf_ShutdownFile_raft_2ffile_5fservice_2eproto();
  
  void InitAsDefaultInstance();
  static GetFileRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetFileResponse : public ::google::protobuf::Message {
 public:
  GetFileResponse();
  virtual ~GetFileResponse();
  
  GetFileResponse(const GetFileResponse& from);
  
  inline GetFileResponse& operator=(const GetFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFileResponse& default_instance();
  
  void Swap(GetFileResponse* other);
  
  // implements Message ----------------------------------------------
  
  GetFileResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetFileResponse& from);
  void MergeFrom(const GetFileResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool eof = 1;
  inline bool has_eof() const;
  inline void clear_eof();
  static const int kEofFieldNumber = 1;
  inline bool eof() const;
  inline void set_eof(bool value);
  
  // @@protoc_insertion_point(class_scope:raft.GetFileResponse)
 private:
  inline void set_has_eof();
  inline void clear_has_eof();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool eof_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_raft_2ffile_5fservice_2eproto();
  friend void protobuf_AssignDesc_raft_2ffile_5fservice_2eproto();
  friend void protobuf_ShutdownFile_raft_2ffile_5fservice_2eproto();
  
  void InitAsDefaultInstance();
  static GetFileResponse* default_instance_;
};
// -------------------------------------------------------------------

class PathInfo : public ::google::protobuf::Message {
 public:
  PathInfo();
  virtual ~PathInfo();
  
  PathInfo(const PathInfo& from);
  
  inline PathInfo& operator=(const PathInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PathInfo& default_instance();
  
  void Swap(PathInfo* other);
  
  // implements Message ----------------------------------------------
  
  PathInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PathInfo& from);
  void MergeFrom(const PathInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  
  // required bool is_directory = 2;
  inline bool has_is_directory() const;
  inline void clear_is_directory();
  static const int kIsDirectoryFieldNumber = 2;
  inline bool is_directory() const;
  inline void set_is_directory(bool value);
  
  // @@protoc_insertion_point(class_scope:raft.PathInfo)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_is_directory();
  inline void clear_has_is_directory();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* path_;
  bool is_directory_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_raft_2ffile_5fservice_2eproto();
  friend void protobuf_AssignDesc_raft_2ffile_5fservice_2eproto();
  friend void protobuf_ShutdownFile_raft_2ffile_5fservice_2eproto();
  
  void InitAsDefaultInstance();
  static PathInfo* default_instance_;
};
// -------------------------------------------------------------------

class ListPathRequest : public ::google::protobuf::Message {
 public:
  ListPathRequest();
  virtual ~ListPathRequest();
  
  ListPathRequest(const ListPathRequest& from);
  
  inline ListPathRequest& operator=(const ListPathRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListPathRequest& default_instance();
  
  void Swap(ListPathRequest* other);
  
  // implements Message ----------------------------------------------
  
  ListPathRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListPathRequest& from);
  void MergeFrom(const ListPathRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  
  // @@protoc_insertion_point(class_scope:raft.ListPathRequest)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* path_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_raft_2ffile_5fservice_2eproto();
  friend void protobuf_AssignDesc_raft_2ffile_5fservice_2eproto();
  friend void protobuf_ShutdownFile_raft_2ffile_5fservice_2eproto();
  
  void InitAsDefaultInstance();
  static ListPathRequest* default_instance_;
};
// -------------------------------------------------------------------

class ListPathResponse : public ::google::protobuf::Message {
 public:
  ListPathResponse();
  virtual ~ListPathResponse();
  
  ListPathResponse(const ListPathResponse& from);
  
  inline ListPathResponse& operator=(const ListPathResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListPathResponse& default_instance();
  
  void Swap(ListPathResponse* other);
  
  // implements Message ----------------------------------------------
  
  ListPathResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListPathResponse& from);
  void MergeFrom(const ListPathResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .raft.PathInfo path_info = 1;
  inline int path_info_size() const;
  inline void clear_path_info();
  static const int kPathInfoFieldNumber = 1;
  inline const ::raft::PathInfo& path_info(int index) const;
  inline ::raft::PathInfo* mutable_path_info(int index);
  inline ::raft::PathInfo* add_path_info();
  inline const ::google::protobuf::RepeatedPtrField< ::raft::PathInfo >&
      path_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::raft::PathInfo >*
      mutable_path_info();
  
  // @@protoc_insertion_point(class_scope:raft.ListPathResponse)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::raft::PathInfo > path_info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_raft_2ffile_5fservice_2eproto();
  friend void protobuf_AssignDesc_raft_2ffile_5fservice_2eproto();
  friend void protobuf_ShutdownFile_raft_2ffile_5fservice_2eproto();
  
  void InitAsDefaultInstance();
  static ListPathResponse* default_instance_;
};
// ===================================================================

class FileService_Stub;

class FileService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline FileService() {};
 public:
  virtual ~FileService();
  
  typedef FileService_Stub Stub;
  
  static const ::google::protobuf::ServiceDescriptor* descriptor();
  
  virtual void list_path(::google::protobuf::RpcController* controller,
                       const ::raft::ListPathRequest* request,
                       ::raft::ListPathResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void get_file(::google::protobuf::RpcController* controller,
                       const ::raft::GetFileRequest* request,
                       ::raft::GetFileResponse* response,
                       ::google::protobuf::Closure* done);
  
  // implements Service ----------------------------------------------
  
  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FileService);
};

class FileService_Stub : public FileService {
 public:
  FileService_Stub(::google::protobuf::RpcChannel* channel);
  FileService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~FileService_Stub();
  
  inline ::google::protobuf::RpcChannel* channel() { return channel_; }
  
  // implements FileService ------------------------------------------
  
  void list_path(::google::protobuf::RpcController* controller,
                       const ::raft::ListPathRequest* request,
                       ::raft::ListPathResponse* response,
                       ::google::protobuf::Closure* done);
  void get_file(::google::protobuf::RpcController* controller,
                       const ::raft::GetFileRequest* request,
                       ::raft::GetFileResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FileService_Stub);
};


// ===================================================================


// ===================================================================

// GetFileRequest

// required int64 reader_id = 1;
inline bool GetFileRequest::has_reader_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetFileRequest::set_has_reader_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetFileRequest::clear_has_reader_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetFileRequest::clear_reader_id() {
  reader_id_ = GOOGLE_LONGLONG(0);
  clear_has_reader_id();
}
inline ::google::protobuf::int64 GetFileRequest::reader_id() const {
  return reader_id_;
}
inline void GetFileRequest::set_reader_id(::google::protobuf::int64 value) {
  set_has_reader_id();
  reader_id_ = value;
}

// required string filename = 2;
inline bool GetFileRequest::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetFileRequest::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetFileRequest::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetFileRequest::clear_filename() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& GetFileRequest::filename() const {
  return *filename_;
}
inline void GetFileRequest::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void GetFileRequest::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void GetFileRequest::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetFileRequest::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  return filename_;
}
inline ::std::string* GetFileRequest::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int64 count = 3;
inline bool GetFileRequest::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetFileRequest::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetFileRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetFileRequest::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
  clear_has_count();
}
inline ::google::protobuf::int64 GetFileRequest::count() const {
  return count_;
}
inline void GetFileRequest::set_count(::google::protobuf::int64 value) {
  set_has_count();
  count_ = value;
}

// required int64 offset = 4;
inline bool GetFileRequest::has_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetFileRequest::set_has_offset() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetFileRequest::clear_has_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetFileRequest::clear_offset() {
  offset_ = GOOGLE_LONGLONG(0);
  clear_has_offset();
}
inline ::google::protobuf::int64 GetFileRequest::offset() const {
  return offset_;
}
inline void GetFileRequest::set_offset(::google::protobuf::int64 value) {
  set_has_offset();
  offset_ = value;
}

// -------------------------------------------------------------------

// GetFileResponse

// required bool eof = 1;
inline bool GetFileResponse::has_eof() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetFileResponse::set_has_eof() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetFileResponse::clear_has_eof() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetFileResponse::clear_eof() {
  eof_ = false;
  clear_has_eof();
}
inline bool GetFileResponse::eof() const {
  return eof_;
}
inline void GetFileResponse::set_eof(bool value) {
  set_has_eof();
  eof_ = value;
}

// -------------------------------------------------------------------

// PathInfo

// required string path = 1;
inline bool PathInfo::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PathInfo::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PathInfo::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PathInfo::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& PathInfo::path() const {
  return *path_;
}
inline void PathInfo::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void PathInfo::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void PathInfo::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PathInfo::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* PathInfo::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool is_directory = 2;
inline bool PathInfo::has_is_directory() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PathInfo::set_has_is_directory() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PathInfo::clear_has_is_directory() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PathInfo::clear_is_directory() {
  is_directory_ = false;
  clear_has_is_directory();
}
inline bool PathInfo::is_directory() const {
  return is_directory_;
}
inline void PathInfo::set_is_directory(bool value) {
  set_has_is_directory();
  is_directory_ = value;
}

// -------------------------------------------------------------------

// ListPathRequest

// required string path = 1;
inline bool ListPathRequest::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListPathRequest::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ListPathRequest::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ListPathRequest::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& ListPathRequest::path() const {
  return *path_;
}
inline void ListPathRequest::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void ListPathRequest::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void ListPathRequest::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ListPathRequest::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* ListPathRequest::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ListPathResponse

// repeated .raft.PathInfo path_info = 1;
inline int ListPathResponse::path_info_size() const {
  return path_info_.size();
}
inline void ListPathResponse::clear_path_info() {
  path_info_.Clear();
}
inline const ::raft::PathInfo& ListPathResponse::path_info(int index) const {
  return path_info_.Get(index);
}
inline ::raft::PathInfo* ListPathResponse::mutable_path_info(int index) {
  return path_info_.Mutable(index);
}
inline ::raft::PathInfo* ListPathResponse::add_path_info() {
  return path_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::raft::PathInfo >&
ListPathResponse::path_info() const {
  return path_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::raft::PathInfo >*
ListPathResponse::mutable_path_info() {
  return &path_info_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace raft

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_raft_2ffile_5fservice_2eproto__INCLUDED

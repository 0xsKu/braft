// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "raft/local_storage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace raft {

namespace {

const ::google::protobuf::Descriptor* ConfigurationMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfigurationMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* StableMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StableMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnapshotMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapshotMeta_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_raft_2flocal_5fstorage_2eproto() {
  protobuf_AddDesc_raft_2flocal_5fstorage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "raft/local_storage.proto");
  GOOGLE_CHECK(file != NULL);
  ConfigurationMeta_descriptor_ = file->message_type(0);
  static const int ConfigurationMeta_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationMeta, peers_),
  };
  ConfigurationMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConfigurationMeta_descriptor_,
      ConfigurationMeta::default_instance_,
      ConfigurationMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConfigurationMeta));
  LogMeta_descriptor_ = file->message_type(1);
  static const int LogMeta_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMeta, start_log_index_),
  };
  LogMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogMeta_descriptor_,
      LogMeta::default_instance_,
      LogMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogMeta));
  StableMeta_descriptor_ = file->message_type(2);
  static const int StableMeta_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StableMeta, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StableMeta, votedfor_),
  };
  StableMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StableMeta_descriptor_,
      StableMeta::default_instance_,
      StableMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StableMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StableMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StableMeta));
  SnapshotMeta_descriptor_ = file->message_type(3);
  static const int SnapshotMeta_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotMeta, last_included_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotMeta, last_included_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotMeta, peers_),
  };
  SnapshotMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SnapshotMeta_descriptor_,
      SnapshotMeta::default_instance_,
      SnapshotMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SnapshotMeta));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_raft_2flocal_5fstorage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConfigurationMeta_descriptor_, &ConfigurationMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogMeta_descriptor_, &LogMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StableMeta_descriptor_, &StableMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SnapshotMeta_descriptor_, &SnapshotMeta::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_raft_2flocal_5fstorage_2eproto() {
  delete ConfigurationMeta::default_instance_;
  delete ConfigurationMeta_reflection_;
  delete LogMeta::default_instance_;
  delete LogMeta_reflection_;
  delete StableMeta::default_instance_;
  delete StableMeta_reflection_;
  delete SnapshotMeta::default_instance_;
  delete SnapshotMeta_reflection_;
}

void protobuf_AddDesc_raft_2flocal_5fstorage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::raft::protobuf_AddDesc_raft_2fraft_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030raft/local_storage.proto\022\004raft\032\017raft/r"
    "aft.proto\"\"\n\021ConfigurationMeta\022\r\n\005peers\030"
    "\001 \003(\t\"\"\n\007LogMeta\022\027\n\017start_log_index\030\001 \002("
    "\003\",\n\nStableMeta\022\014\n\004term\030\001 \002(\003\022\020\n\010votedfo"
    "r\030\002 \002(\t\"V\n\014SnapshotMeta\022\032\n\022last_included"
    "_term\030\001 \002(\003\022\033\n\023last_included_index\030\002 \002(\003"
    "\022\r\n\005peers\030\003 \003(\t", 255);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "raft/local_storage.proto", &protobuf_RegisterTypes);
  ConfigurationMeta::default_instance_ = new ConfigurationMeta();
  LogMeta::default_instance_ = new LogMeta();
  StableMeta::default_instance_ = new StableMeta();
  SnapshotMeta::default_instance_ = new SnapshotMeta();
  ConfigurationMeta::default_instance_->InitAsDefaultInstance();
  LogMeta::default_instance_->InitAsDefaultInstance();
  StableMeta::default_instance_->InitAsDefaultInstance();
  SnapshotMeta::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_raft_2flocal_5fstorage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_raft_2flocal_5fstorage_2eproto {
  StaticDescriptorInitializer_raft_2flocal_5fstorage_2eproto() {
    protobuf_AddDesc_raft_2flocal_5fstorage_2eproto();
  }
} static_descriptor_initializer_raft_2flocal_5fstorage_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ConfigurationMeta::kPeersFieldNumber;
#endif  // !_MSC_VER

ConfigurationMeta::ConfigurationMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConfigurationMeta::InitAsDefaultInstance() {
}

ConfigurationMeta::ConfigurationMeta(const ConfigurationMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConfigurationMeta::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfigurationMeta::~ConfigurationMeta() {
  SharedDtor();
}

void ConfigurationMeta::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConfigurationMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigurationMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigurationMeta_descriptor_;
}

const ConfigurationMeta& ConfigurationMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_2flocal_5fstorage_2eproto();  return *default_instance_;
}

ConfigurationMeta* ConfigurationMeta::default_instance_ = NULL;

ConfigurationMeta* ConfigurationMeta::New() const {
  return new ConfigurationMeta;
}

void ConfigurationMeta::Clear() {
  peers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConfigurationMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string peers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_peers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_peers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->peers(0).data(), this->peers(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_peers;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConfigurationMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string peers = 1;
  for (int i = 0; i < this->peers_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->peers(i).data(), this->peers(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->peers(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConfigurationMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string peers = 1;
  for (int i = 0; i < this->peers_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peers(i).data(), this->peers(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->peers(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConfigurationMeta::ByteSize() const {
  int total_size = 0;
  
  // repeated string peers = 1;
  total_size += 1 * this->peers_size();
  for (int i = 0; i < this->peers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->peers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigurationMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConfigurationMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConfigurationMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConfigurationMeta::MergeFrom(const ConfigurationMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  peers_.MergeFrom(from.peers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConfigurationMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigurationMeta::CopyFrom(const ConfigurationMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigurationMeta::IsInitialized() const {
  
  return true;
}

void ConfigurationMeta::Swap(ConfigurationMeta* other) {
  if (other != this) {
    peers_.Swap(&other->peers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConfigurationMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfigurationMeta_descriptor_;
  metadata.reflection = ConfigurationMeta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogMeta::kStartLogIndexFieldNumber;
#endif  // !_MSC_VER

LogMeta::LogMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogMeta::InitAsDefaultInstance() {
}

LogMeta::LogMeta(const LogMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogMeta::SharedCtor() {
  _cached_size_ = 0;
  start_log_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogMeta::~LogMeta() {
  SharedDtor();
}

void LogMeta::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogMeta_descriptor_;
}

const LogMeta& LogMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_2flocal_5fstorage_2eproto();  return *default_instance_;
}

LogMeta* LogMeta::default_instance_ = NULL;

LogMeta* LogMeta::New() const {
  return new LogMeta;
}

void LogMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    start_log_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 start_log_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_log_index_)));
          set_has_start_log_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 start_log_index = 1;
  if (has_start_log_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->start_log_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 start_log_index = 1;
  if (has_start_log_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->start_log_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogMeta::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 start_log_index = 1;
    if (has_start_log_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_log_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogMeta::MergeFrom(const LogMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_log_index()) {
      set_start_log_index(from.start_log_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogMeta::CopyFrom(const LogMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogMeta::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void LogMeta::Swap(LogMeta* other) {
  if (other != this) {
    std::swap(start_log_index_, other->start_log_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogMeta_descriptor_;
  metadata.reflection = LogMeta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StableMeta::kTermFieldNumber;
const int StableMeta::kVotedforFieldNumber;
#endif  // !_MSC_VER

StableMeta::StableMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StableMeta::InitAsDefaultInstance() {
}

StableMeta::StableMeta(const StableMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StableMeta::SharedCtor() {
  _cached_size_ = 0;
  term_ = GOOGLE_LONGLONG(0);
  votedfor_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StableMeta::~StableMeta() {
  SharedDtor();
}

void StableMeta::SharedDtor() {
  if (votedfor_ != &::google::protobuf::internal::kEmptyString) {
    delete votedfor_;
  }
  if (this != default_instance_) {
  }
}

void StableMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StableMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StableMeta_descriptor_;
}

const StableMeta& StableMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_2flocal_5fstorage_2eproto();  return *default_instance_;
}

StableMeta* StableMeta::default_instance_ = NULL;

StableMeta* StableMeta::New() const {
  return new StableMeta;
}

void StableMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    term_ = GOOGLE_LONGLONG(0);
    if (has_votedfor()) {
      if (votedfor_ != &::google::protobuf::internal::kEmptyString) {
        votedfor_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StableMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 term = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_votedfor;
        break;
      }
      
      // required string votedfor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_votedfor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_votedfor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->votedfor().data(), this->votedfor().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StableMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 term = 1;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->term(), output);
  }
  
  // required string votedfor = 2;
  if (has_votedfor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->votedfor().data(), this->votedfor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->votedfor(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StableMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 term = 1;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->term(), target);
  }
  
  // required string votedfor = 2;
  if (has_votedfor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->votedfor().data(), this->votedfor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->votedfor(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StableMeta::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 term = 1;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->term());
    }
    
    // required string votedfor = 2;
    if (has_votedfor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->votedfor());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StableMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StableMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StableMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StableMeta::MergeFrom(const StableMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_votedfor()) {
      set_votedfor(from.votedfor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StableMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StableMeta::CopyFrom(const StableMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StableMeta::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void StableMeta::Swap(StableMeta* other) {
  if (other != this) {
    std::swap(term_, other->term_);
    std::swap(votedfor_, other->votedfor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StableMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StableMeta_descriptor_;
  metadata.reflection = StableMeta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SnapshotMeta::kLastIncludedTermFieldNumber;
const int SnapshotMeta::kLastIncludedIndexFieldNumber;
const int SnapshotMeta::kPeersFieldNumber;
#endif  // !_MSC_VER

SnapshotMeta::SnapshotMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SnapshotMeta::InitAsDefaultInstance() {
}

SnapshotMeta::SnapshotMeta(const SnapshotMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SnapshotMeta::SharedCtor() {
  _cached_size_ = 0;
  last_included_term_ = GOOGLE_LONGLONG(0);
  last_included_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SnapshotMeta::~SnapshotMeta() {
  SharedDtor();
}

void SnapshotMeta::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SnapshotMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapshotMeta_descriptor_;
}

const SnapshotMeta& SnapshotMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_2flocal_5fstorage_2eproto();  return *default_instance_;
}

SnapshotMeta* SnapshotMeta::default_instance_ = NULL;

SnapshotMeta* SnapshotMeta::New() const {
  return new SnapshotMeta;
}

void SnapshotMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_included_term_ = GOOGLE_LONGLONG(0);
    last_included_index_ = GOOGLE_LONGLONG(0);
  }
  peers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SnapshotMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 last_included_term = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_included_term_)));
          set_has_last_included_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_last_included_index;
        break;
      }
      
      // required int64 last_included_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_included_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_included_index_)));
          set_has_last_included_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_peers;
        break;
      }
      
      // repeated string peers = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_peers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_peers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->peers(0).data(), this->peers(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_peers;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SnapshotMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 last_included_term = 1;
  if (has_last_included_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->last_included_term(), output);
  }
  
  // required int64 last_included_index = 2;
  if (has_last_included_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->last_included_index(), output);
  }
  
  // repeated string peers = 3;
  for (int i = 0; i < this->peers_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->peers(i).data(), this->peers(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->peers(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SnapshotMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 last_included_term = 1;
  if (has_last_included_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->last_included_term(), target);
  }
  
  // required int64 last_included_index = 2;
  if (has_last_included_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->last_included_index(), target);
  }
  
  // repeated string peers = 3;
  for (int i = 0; i < this->peers_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peers(i).data(), this->peers(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->peers(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SnapshotMeta::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 last_included_term = 1;
    if (has_last_included_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_included_term());
    }
    
    // required int64 last_included_index = 2;
    if (has_last_included_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_included_index());
    }
    
  }
  // repeated string peers = 3;
  total_size += 1 * this->peers_size();
  for (int i = 0; i < this->peers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->peers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SnapshotMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SnapshotMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SnapshotMeta::MergeFrom(const SnapshotMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  peers_.MergeFrom(from.peers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_included_term()) {
      set_last_included_term(from.last_included_term());
    }
    if (from.has_last_included_index()) {
      set_last_included_index(from.last_included_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SnapshotMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotMeta::CopyFrom(const SnapshotMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotMeta::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SnapshotMeta::Swap(SnapshotMeta* other) {
  if (other != this) {
    std::swap(last_included_term_, other->last_included_term_);
    std::swap(last_included_index_, other->last_included_index_);
    peers_.Swap(&other->peers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SnapshotMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapshotMeta_descriptor_;
  metadata.reflection = SnapshotMeta_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace raft

// @@protoc_insertion_point(global_scope)
